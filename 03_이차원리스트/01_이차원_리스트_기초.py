### 이차원 리스트 기초

# 이차원 리스트는 행렬이다
# 행렬은 좌표로 나타낼 수 있다

## 1. 이차원 리스트의 조회와 수정
matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
]

print(matrix[0][0]) # 1
print(matrix[2][2]) # 9

matrix[2][2] = 0
print(matrix)   # [[1, 2, 3], [4, 5, 6], [7, 8, 0]]


## 2. 이차원 리스트의 초기화
matrix = []

for _ in range(3): # 3 : 행의 개수 
    matrix.append([0] * 4) # 4 : 열의 개수
# 리스트의 곱셈
# [0] * 4 = [0, 0, 0, 0]

print(matrix)   # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

# 리스트 컴프리헨션 => 2차원 리스트 간단하게 초기화 가능
# 반복문 복사해서 붙여넣고 왼쪽에다가는 append안에 들어가는 원소 넣기
matrix = [[0] * 4 for _ in range(3)]
print(matrix)   # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]


# 이차원 리스트 왜 [[0] * 4] * 3 이렇게 초기화하면 안 되는 이유 => 리스트의 곱셈은 얕은 복사라서 값이 다 바뀌어버림!
matrix = [[0] * 4] * 3  # 얕은 복사
# [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
# => [0, 0, 0, 0] 3가지 모두 같은 주소를 바라봄
# => 같은 주소를 바라보기 때문에 모두 동일한 애들임
# => 그래서 1로 값 바꾸면 3가지 모두 바뀜! (얕은 복사의 경우)
# => for문 이용하는 건 깊은 복사
# => 1로 값 바꾸면 다른 건 바뀌지 않음

matrix[0][0] = 1
print(matrix)   # [[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]
# => 얕은 복사라 같은 배열이 3개 들어가는 것과 같기 때문임


# 여기서 의문!
# [0] * 4 은 왜 [0, 0, 0, 0] => [1, 1, 1, 1] 로 안 바껴?
# => mutable과 immutable의 차이임

# [0] * 3 => [0, 0, 0] 얘도 3가지 0 모두 같은 0을 가르키는 건 맞음
# 근데 변경할 때는?
# 변경하는 순간 정수는 immutable임! 
# 변경하려는 순간 원본이 변경되는 게 아니라 변경하려는 객체가 생기면서
# 바뀐 새로운 1이 생기고 1을 가리킴
# 정수도 원본이 변경되지 않는 immutable임 (정수, 실수, 문자열도 마찬가지임)

# 결론
# [0] * 3 => immutable에 대한 얕은 복사라 원본이 변경되지 않음
# [[0] * 4] * 3 => mutable에 대한 얕은 복사라 원본이 변경됨

# => [[0] * 4 for _ in range(3)] 내부의 하나의 한줄은 곱셈으로 가능한데 전체는 for문으로 돌려야됨